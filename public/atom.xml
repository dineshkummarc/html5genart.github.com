<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HTML5 Generative Art]]></title>
  <link href="http://code.html5genart.com/atom.xml" rel="self"/>
  <link href="http://code.html5genart.com/"/>
  <updated>2012-01-22T20:34:04-05:00</updated>
  <id>http://code.html5genart.com/</id>
  <author>
    <name><![CDATA[Pedro Ha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Black Waters]]></title>
    <link href="http://code.html5genart.com/blog/2012/01/22/black-waters/"/>
    <updated>2012-01-22T20:05:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2012/01/22/black-waters</id>
    <content type="html"><![CDATA[<p>Based on Jason Davie&#8217;s <a href="http://www.jasondavies.com/animated-quasicrystals/">Quasicrystals</a></p>

<div><canvas id="bwcanvas" width="500" height="500"></canvas></div>


<p><strong> Modifications in the fragment shader code </strong></p>

<p>From</p>

<figure class='code'><figcaption><span>HTML source</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>vec2 defpixel = (pixel - vec2(.5)) * 170.; // 170 -&gt; 20
</span><span class='line'>
</span><span class='line'>vec4 color = vec4(ans * .53, ans * .33, ans * .65, 1.);
</span></code></pre></td></tr></table></div></figure>


<p>To</p>

<figure class='code'><figcaption><span>HTML source</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>vec2 defpixel = (pixel - vec2(.5)) * 20.; // 170 -&gt; 20
</span><span class='line'>
</span><span class='line'>vec4 color = vec4( 0.3*ans, ans, ans, 1.0 ); // black water color
</span></code></pre></td></tr></table></div></figure>




<script id="shader-vs" type="x-shader/x-vertex"> 
  attribute vec3 position;
  attribute vec2 texCoord1;
  
  uniform mat4 worldMatrix;
  uniform mat4 projectionMatrix;
  
  varying   vec2 pixel;
  void main(void) {
     gl_Position = projectionMatrix * worldMatrix * vec4(position, 1.);
     pixel = texCoord1;
  }
</script>




<script id="shader-fs" type="x-shader/x-fragment"> 
  #ifdef GL_ES
  precision highp float;
  #endif

  #define PI 3.1415926535

  uniform sampler2D sampler1;
  uniform float t;

  varying vec2 pixel;
  uniform vec2 mouse;

  void main(void) {
    const float step = PI / 7.0;
    float angle = 0.;
    float s;
    float c;
    float ans;

    vec2 defpixel = (pixel - vec2(.5)) * 20.;

    for (int i = 0; i < 7; i++) {
      s = sin(angle);
      c = cos(angle);
      ans += (cos( c * defpixel.x + s * defpixel.y + t) + 1.) / 2.;
      angle += step;
    }

    ans = mod(floor(ans), 2.0) == 0. ? fract(ans) : 1. - fract(ans);
    //vec4 color = vec4(ans * .53, ans * .33, ans * .65, 1.);
    vec4 color = vec4( 0.3*ans, ans, ans, 1.0 ); // black waters
    color.w = 1.;

    gl_FragColor = color;
  }
</script>




<script src="http://code.html5genart.com/html5/js/PhiloGL.cls.js"></script>




<script>

var w = 500,
    h = 500,
    canvas = document.getElementById('c');

PhiloGL.unpack();

if (!PhiloGL.hasWebGL()) {
  alert("WebGL is not supported in this browser");
}
else {
  var programId = "black-waters";
  
  PhiloGL("bwcanvas", {
    program: [{
      id: programId,
      from: "ids",
      vs: "shader-vs",
      fs: "shader-fs"
    }],
    onError: function(e) {
      console.log(e);
    },
    onLoad: function(app) {
      time = Date.now();

      draw();

      function draw() {
        t = ((Date.now() - time) / 300) % (2 * Math.PI);

        Media.Image.postProcess({
          width: w,
          height: h,
          toScreen: true,
          program: programId,
          uniforms: {t: t}
        });

        Fx.requestAnimationFrame(draw);
      }
    }
  });
}
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Steps with Quasicrystals]]></title>
    <link href="http://code.html5genart.com/blog/2011/12/27/quasicrystals-first-steps/"/>
    <updated>2011-12-27T18:04:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2011/12/27/quasicrystals-first-steps</id>
    <content type="html"><![CDATA[<p>This is a Javascript port of <a href="http://wealoneonearth.blogspot.com/2011/10/animated-quasicrystals.html">QUASI1.java</a> by Michael Rule. I was playing with different values for K and switching between log-polar and cartesian coordinates. I settled down on K=3 and log-polar as the example for this post. I also cycled colors between blue and green.</p>

<p><canvas id="canvas-polar" width="200" height="200"></canvas></p>


<script src="http://code.html5genart.com/html5/generative-art/quasicrystals/quasi1.js"></script>


<p>The highlited source code can be found in <a href="http://code.html5genart.com/html5/generative-art/quasicrystals/learning-quasicrystals.html">here</a></p>

<p>The computations for the quasicrystals are very intensive and will consume a lot of CPU. Therefore, I had to reduce the size down to 200x200 pixels. I was surprised at the speed of the WebGL quasicrystal demos by <a href="http://www.jasondavies.com/animated-quasicrystals/">Jason Davies</a> and <a href="http://senchalabs.github.com/philogl/PhiloGL/examples/quasicrystal/">PhiloGL</a>. The use of WebGL shaders takes the onus from the CPUs to the <a href="http://gpucomputing.net/">GPUs</a>.</p>

<p>In this particular Javascript port, I didn&#8217;t use Processing.js.
Instead I used the <a href="http://paulirish.com/2011/requestanimationframe-for-smart-animating/">requestAnimationFrame shim</a>  by Paul Irish and HTML5 <a href="http://beej.us/blog/2010/02/html5s-canvas-part-ii-pixel-manipulation/">canvas pixel manipulation</a> as described by beej.</p>

<p><strong>Quasicrystal Resources</strong></p>

<p><a href="http://wealoneonearth.blogspot.com/search/label/quasicrystal">http://wealoneonearth.blogspot.com/search/label/quasicrystal</a></p>

<p><a href="http://mainisusuallyafunction.blogspot.com/2011/10/quasicrystals-as-sums-of-waves-in-plane.html">http://mainisusuallyafunction.blogspot.com/2011/10/quasicrystals-as-sums-of-waves-in-plane.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Without Title by Lia]]></title>
    <link href="http://code.html5genart.com/blog/2011/12/19/without-title-by-lia/"/>
    <updated>2011-12-19T21:30:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2011/12/19/without-title-by-lia</id>
    <content type="html"><![CDATA[<p>This is a Javascript port of Lia&#8217;s <a href="http://www.liaworks.com/theprojects/withouttitle/">WithoutTitle</a>. The original can be seen in her <a href="http://liaworks.com/projects/withouttitle/">Java applet</a>. You should check some of Lia&#8217;s really
<a href="http://www.liaworks.com/category/theprojects/">amazing projects</a>.</p>

<p>Although this is subjective, the visual quality didn&#8217;t equal to the original.
It&#8217;s my impression that the <code>smooth()</code> function is not working as expected.</p>

<p>The drawing performance in the Javascript version is notorious. It feels very responsive.
Personally, I find the slower Java/Processing version more pleasant and relaxing.
I don&#8217;t like to slow things down but it may improve the experience in this case.</p>

<p>You can click/move the mouse to interact with the drawing and press any key to pause.</p>

<p><canvas id="canvas-without-title" width="600" height="600"></canvas></p>


<p>Due to the way Javascript code works, there&#8217;s quite a bit of noise because of &#8216;this&#8217;.
And the code is not as readable as the Java/Processing counterpart which is more succinct.</p>

<p>You can look at the source code in <a href="http://code.html5genart.com/html5/generative-art/without-title/without-title.html">here</a></p>

<script src="http://code.html5genart.com/html5/generative-art/without-title/wo-title.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rose Fabric]]></title>
    <link href="http://code.html5genart.com/blog/2011/12/11/rose-fabric/"/>
    <updated>2011-12-11T18:04:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2011/12/11/rose-fabric</id>
    <content type="html"><![CDATA[<p>This is a modification of the first example in chapter four of <a href="http://www.glassner.com/andrew/writing/books/processing.htm"><strong>Processing for Visual Artists</strong></a> by <a href="http://www.glassner.com/">Andrew Glassner</a> which consists of an algorithm to simulate the texture of a fabric. I used a vivid pink color and changed the algorithm to be able to visualize the thread creation process one thread at a time.</p>

<p><canvas id="canvas1" width="600" height="400"></canvas></p>


<p>You can look at the source code in <a href="http://code.html5genart.com/html5/generative-art/rose-fabric/rose.html">here</a></p>

<script src="http://code.html5genart.com/html5/generative-art/rose-fabric/stream.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First steps with Processing.js]]></title>
    <link href="http://code.html5genart.com/blog/2011/12/10/first-steps-with-processing-js/"/>
    <updated>2011-12-10T18:13:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2011/12/10/first-steps-with-processing-js</id>
    <content type="html"><![CDATA[<p>I started hacking with Processing.js using the <strong>not</strong> recommended way, which is to use the Javascript method and skip the creation of a PDE file, as described in <a href="http://processingjs.org/learning/">Writing Processing code with JavaScript</a></p>

<p>Moreover, I decided to make certain adjustments to make the Javascript code as readable as the Java-based Processing code (PDE file). In this exploration I came up with a hackish way to do a local import using <code>eval()</code> (which shouldn&#8217;t be used in general).</p>

<p>Therefore, I came up with the following Javascript variations of <a href="http://processingjs.org/learning/">learning processing.js</a>: <a href="http://code.html5genart.com/html5/generative-art/learning-clock/clock.html">Clock</a> and <a href="http://code.html5genart.com/html5/generative-art/learning-cube/texture_cube.html">Texture Cube</a></p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HTML5 Generative Art]]></title>
  <link href="http://html5genart.github.com/atom.xml" rel="self"/>
  <link href="http://html5genart.github.com/"/>
  <updated>2011-12-11T20:28:28-05:00</updated>
  <id>http://html5genart.github.com/</id>
  <author>
    <name><![CDATA[HTML5GenArt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rose Fabric]]></title>
    <link href="http://html5genart.github.com/blog/2011/12/11/rose-fabric/"/>
    <updated>2011-12-11T18:04:00-05:00</updated>
    <id>http://html5genart.github.com/blog/2011/12/11/rose-fabric</id>
    <content type="html"><![CDATA[<p>This is a modification of the first example in chapter four of <a href="http://www.glassner.com/andrew/writing/books/processing.htm"><strong>Processing for Visual Artists</strong></a> by <a href="http://www.glassner.com/">Andrew Glassner</a> which consists of an algorithm to simulate the texture of a fabric. I used a vivid pink color and changed the algorithm to be able to visualize the thread creation process one thread at a time.</p>

<p><canvas id="canvas1" width="600" height="400"></canvas></p>


<p>Comments: Not sure if this is a bug, but I have to modify the original PDE&#8217;s NoiseScale from 0.005 to 0.0005 to achieve similar visual effects as the PDE (Processing file). The NoiseScale is the factor used for the <a href="http://en.wikipedia.org/wiki/Perlin_noise">Perlin noise</a> function.</p>

<p>I&#8217;m also using a technique to bring a subset of the Processing API into the local scope of <code>sketchProc()</code> by calling <code>eval()</code> on <code>getLocalApi()</code>. (If this sounds too mysterious, check out <a href="http://html5genart.github.com/blog/2011/12/10/first-steps-with-processing-js/">First Steps with Processing</a>)</p>

<figure class='code'><figcaption><span> (stream.js)</span> <a href='http://html5genart.github.com/html5/generative-art/rose-fabric/stream.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">sketchProc</span><span class="p">(</span><span class="nx">processing</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Local import of Processing API subset to this scope.</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">localFns</span> <span class="o">=</span> <span class="nx">getLocalApi</span><span class="p">(</span><span class="s1">&#39;processing&#39;</span><span class="p">);</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">localFns</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">width</span>           <span class="o">=</span> <span class="mi">600</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">height</span>          <span class="o">=</span> <span class="mi">400</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">NoiseScale</span>      <span class="o">=</span> <span class="mf">0.0005</span><span class="p">;</span>   <span class="c1">// Different than the PDE!</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">NoiseOffsetX</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">NoiseOffsetY</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">maxStreams</span>  <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>     <span class="c1">// At least 1000, no more than 5000</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">streams</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">setup</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">size</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">,</span> <span class="nx">processing</span><span class="p">.</span><span class="nx">P2D</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">background</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">smooth</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">noFill</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">stroke</span><span class="p">(</span><span class="mi">216</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">draw</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">NoiseOffsetX</span> <span class="o">+=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">NoiseOffsetY</span> <span class="o">+=</span> <span class="mf">7.1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">streams</span> <span class="o">&lt;</span> <span class="nx">maxStreams</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">drawOneStream</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">drawOneStream</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">streams</span> <span class="o">=</span> <span class="nx">streams</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">px</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">py</span> <span class="o">=</span> <span class="nx">height</span><span class="o">/</span><span class="mf">2.0</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">vx</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">vy</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">pcnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="nx">px</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">px</span><span class="o">&lt;</span><span class="nx">width</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">py</span><span class="o">&lt;</span><span class="nx">height</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">py</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">point</span><span class="p">(</span><span class="nx">px</span><span class="p">,</span> <span class="nx">py</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pcnt</span><span class="o">+</span><span class="nx">NoiseOffsetX</span><span class="p">)</span> <span class="o">*</span> <span class="nx">NoiseScale</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pcnt</span><span class="o">+</span><span class="nx">NoiseOffsetY</span><span class="p">)</span> <span class="o">*</span> <span class="nx">NoiseScale</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">xNoise</span> <span class="o">=</span> <span class="nx">noise</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">yNoise</span> <span class="o">=</span> <span class="nx">noise</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">vx</span> <span class="o">=</span> <span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="nx">vx</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">map</span><span class="p">(</span><span class="nx">xNoise</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mf">4.0</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">vy</span> <span class="o">=</span> <span class="p">((</span><span class="mi">3</span><span class="o">*</span><span class="nx">vy</span><span class="p">)</span> <span class="o">+</span>  <span class="nx">map</span><span class="p">(</span><span class="nx">yNoise</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span><span class="o">/</span><span class="mf">4.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">px</span> <span class="o">+=</span> <span class="nx">vx</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">py</span> <span class="o">+=</span> <span class="nx">vy</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">pcnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">processing</span><span class="p">.</span><span class="nx">setup</span> <span class="o">=</span> <span class="nx">setup</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">processing</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="nx">draw</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;canvas1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// attaching the sketchProc function to the canvas</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Processing</span><span class="p">(</span><span class="nx">canvas</span><span class="p">,</span> <span class="nx">sketchProc</span><span class="p">);</span>
</span><span class='line'><span class="c1">// p.exit(); to detach it</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  Bring a subset of Processing API to the local scope of sketchProc()</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">getLocalApi</span><span class="p">(</span><span class="nx">processingVarName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">api</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">,</span> <span class="s1">&#39;background&#39;</span><span class="p">,</span> <span class="s1">&#39;fill&#39;</span><span class="p">,</span> <span class="s1">&#39;noStroke&#39;</span><span class="p">,</span> <span class="s1">&#39;noFill&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;stroke&#39;</span><span class="p">,</span> <span class="s1">&#39;smooth&#39;</span><span class="p">,</span> <span class="s1">&#39;point&#39;</span><span class="p">,</span> <span class="s1">&#39;noise&#39;</span><span class="p">,</span> <span class="s1">&#39;map&#39;</span><span class="p">,</span> <span class="s1">&#39;exit&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tmpl</span> <span class="o">=</span> <span class="s1">&#39;var ${method} = function() &#39;</span> <span class="o">+</span>
</span><span class='line'>                <span class="s1">&#39;{ return ${ctx}.${method}.apply(${ctx}, arguments); }&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">cmds</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">api</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cmd</span> <span class="o">=</span>   <span class="nx">tmpl</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\${method}/g</span><span class="p">,</span> <span class="nx">api</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\${ctx}/g</span><span class="p">,</span> <span class="nx">processingVarName</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">cmds</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">cmd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">localApi</span> <span class="o">=</span> <span class="nx">cmds</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// alert(localApi);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">localApi</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<script src="http://html5genart.github.com/html5/js/processing-1.3.6-api.js"></script>


<script src="http://html5genart.github.com/html5/generative-art/rose-fabric/stream.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First steps with Processing.js]]></title>
    <link href="http://html5genart.github.com/blog/2011/12/10/first-steps-with-processing-js/"/>
    <updated>2011-12-10T18:13:00-05:00</updated>
    <id>http://html5genart.github.com/blog/2011/12/10/first-steps-with-processing-js</id>
    <content type="html"><![CDATA[<p>I started hacking with Processing.js using the <strong>not</strong> recommended way, which is to use the Javascript method and skip the creation of a PDE file, as described in the <a href="http://processingjs.org/learning/">Writing Processing code with JavaScript</a></p>

<p>Moreover, I decided to make certain adjustments to make the Javascript code as readable as the Java-based Processing code (PDE file). In this exploration I came up with a hackish way to do a local import using <code>eval()</code> (which shouldn&#8217;t be used in general).</p>

<p>Therefore, I came up with the following Javascript variations of [learning processing.js] (http://processingjs.org/learning/): <a href="http://html5genart.github.com/html5/generative-art/learning-clock/clock.html">Clock</a> and <a href="http://html5genart.github.com/html5/generative-art/learning-cube/texture_cube.html">Texture Cube</a></p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>

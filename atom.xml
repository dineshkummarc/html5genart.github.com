<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HTML5 Generative Art]]></title>
  <link href="http://code.html5genart.com/atom.xml" rel="self"/>
  <link href="http://code.html5genart.com/"/>
  <updated>2011-12-20T13:46:55-05:00</updated>
  <id>http://code.html5genart.com/</id>
  <author>
    <name><![CDATA[HTML5GenArt]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Without Title by Lia]]></title>
    <link href="http://code.html5genart.com/blog/2011/12/19/without-title-by-lia/"/>
    <updated>2011-12-19T21:30:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2011/12/19/without-title-by-lia</id>
    <content type="html"><![CDATA[<p>This is a Javascript port of Lia&#8217;s <a href="http://www.liaworks.com/theprojects/withouttitle/">WithoutTitle</a>. The original can be seen in her <a href="http://liaworks.com/projects/withouttitle/">Java applet</a>. You should check some of Lia&#8217;s really
<a href="http://www.liaworks.com/category/theprojects/">amazing projects</a>.</p>

<p>Although this is subjective, the visual quality didn&#8217;t equal to the original.
It&#8217;s my impression that the <code>smooth()</code> function is not working as expected.</p>

<p>The drawing performance in the Javascript version is notorious. It feels very responsive.
Personally, I find the slower Java/Processing version more pleasant and relaxing.
I don&#8217;t like to slow things down but it may improve the experience in this case.</p>

<p>You can click/move the mouse to interact with the drawing and press any key to pause.</p>

<p><canvas id="canvas-without-title" width="600" height="600"></canvas></p>


<p>Due to the way Javascript code works, there&#8217;s quite a bit of noise because of &#8216;this&#8217;.
And the code is not as readable as the Java/Processing counterpart which is more succinct.</p>

<p>You can look at the source code in <a href="http://code.html5genart.com/html5/generative-art/without-title/without-title.html">here</a></p>

<script src="http://code.html5genart.com/html5/generative-art/without-title/wo-title.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rose Fabric]]></title>
    <link href="http://code.html5genart.com/blog/2011/12/11/rose-fabric/"/>
    <updated>2011-12-11T18:04:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2011/12/11/rose-fabric</id>
    <content type="html"><![CDATA[<p>This is a modification of the first example in chapter four of <a href="http://www.glassner.com/andrew/writing/books/processing.htm"><strong>Processing for Visual Artists</strong></a> by <a href="http://www.glassner.com/">Andrew Glassner</a> which consists of an algorithm to simulate the texture of a fabric. I used a vivid pink color and changed the algorithm to be able to visualize the thread creation process one thread at a time.</p>

<p><canvas id="canvas1" width="600" height="400"></canvas></p>


<p>You can look at the source code in <a href="http://code.html5genart.com/html5/generative-art/rose-fabric/rose.html">here</a></p>

<script src="http://code.html5genart.com/html5/generative-art/rose-fabric/stream.js"></script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First steps with Processing.js]]></title>
    <link href="http://code.html5genart.com/blog/2011/12/10/first-steps-with-processing-js/"/>
    <updated>2011-12-10T18:13:00-05:00</updated>
    <id>http://code.html5genart.com/blog/2011/12/10/first-steps-with-processing-js</id>
    <content type="html"><![CDATA[<p>I started hacking with Processing.js using the <strong>not</strong> recommended way, which is to use the Javascript method and skip the creation of a PDE file, as described in the <a href="http://processingjs.org/learning/">Writing Processing code with JavaScript</a></p>

<p>Moreover, I decided to make certain adjustments to make the Javascript code as readable as the Java-based Processing code (PDE file). In this exploration I came up with a hackish way to do a local import using <code>eval()</code> (which shouldn&#8217;t be used in general).</p>

<p>Therefore, I came up with the following Javascript variations of <a href="http://processingjs.org/learning/">learning processing.js</a>: <a href="http://code.html5genart.com/html5/generative-art/learning-clock/clock.html">Clock</a> and <a href="http://code.html5genart.com/html5/generative-art/learning-cube/texture_cube.html">Texture Cube</a></p>

<p>Cheers!</p>
]]></content>
  </entry>
  
</feed>
